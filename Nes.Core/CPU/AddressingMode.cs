namespace Nes.Core;

/// <summary>
/// 寻址模式
/// </summary>
/// <remarks>详情内容见：https://www.nesdev.org/obelisk-6502-guide/addressing.html</remarks>
public enum AddressingMode
{
    /// <summary>
    /// 指令的功能直接隐含了信息的源和目标，无需进一步指定操作数。
    /// 例如，“清除进位标志”（CLC）和“从子程序返回”（RTS）指令。
    /// </summary>
    Implicit,

    /// <summary>
    /// 某些指令可以直接对累加器进行操作。例如：“LSR A” 和 “ROR A” 指令。
    /// </summary>
    Accumulator,

    /// <summary>
    /// 指令的操作数直接指定一个 8 位常量。它由一个 '#' 符号后跟一个数值表达式表示。
    /// 例如：“LDA #10”。
    /// </summary>
    Immediate,

    /// <summary>
    /// 使用零页寻址模式的指令仅包含一个 8 位地址操作数。这将寻址范围限制在内存的前 256 个字节（例如：$0000 到 $00FF），
    /// 其中地址的最高有效字节始终为零。在零页模式下，指令中仅包含地址的最低有效字节，这使得指令长度减少一个字节（节省空间），
    /// 并且在执行期间少了一次内存读取（提高速度）。如果操作数计算结果为零页地址，并且指令支持该模式（并非所有指令都支持），
    /// 汇编器会自动选择零页寻址模式。
    /// </summary>
    ZeroPage,

    /// <summary>
    /// 通过将指令中的 8 位零页地址与 X 寄存器的当前值相加来计算寻址，
    /// 如果 X 寄存器包含 0xf，并且执行了指令 “LDA $80,X”，则累加器将从 0x8f（即 0x80 + 0xf）加载数据，
    /// 注意，如果基地址与寄存器的和超过 0xff，地址计算会回绕，
    /// 在上述例子中，如果 X 寄存器的值为 0xff，则计算出的地址将是 0x7f，即 (0x80 + 0xff) & 0xff，
    /// </summary>
    ZeroPageX,

    /// <summary>
    /// 通过将指令中的 8 位零页地址与 Y 寄存器的当前值相加来计算寻址。
    /// 该模式仅能与 LDX 和 STX 指令一起使用。
    /// </summary>
    ZeroPageY,

    /// <summary>
    /// 相对寻址模式用于分支指令（例如 BEQ、BNE 等），这些指令包含一个有符号的 8 位相对偏移量（范围从 -128 到 127），
    /// 如果条件满足，则将其加到程序计数器（PC）上。由于程序计数器本身在指令执行期间会增加 2，
    /// 因此目标指令的有效地址范围必须在分支指令的 -126 到 +129 字节之间。
    /// </summary>
    Relative,

    /// <summary>
    /// 绝对寻址包含一个完整的 16 位地址来标识目标位置。
    /// </summary>
    Absolute,

    /// <summary>
    /// 使用 X 寄存器索引的绝对寻址指令通过将指令中的 16 位地址与 X 寄存器的内容相加来计算目标地址。
    /// 例如，如果 X 寄存器包含 0x92，则 “STA $2000,X” 指令将累加器的内容存储到 $2092（即 $2000 + $92）。
    /// </summary>
    AbsoluteX,

    /// <summary>
    /// 使用 Y 寄存器索引的绝对寻址指令通过将指令中的 16 位地址与 Y 寄存器的内容相加来计算目标地址。
    /// 例如，如果 Y 寄存器包含 0x92，则 “STA $2000,Y” 指令将累加器的内容存储到 $2092（即 $2000 + $92）。
    /// </summary>
    AbsoluteY,

    /// <summary>
    /// JMP 是唯一支持间接寻址的 6502 指令。指令包含一个 16 位地址，用于标识目标地址的最低有效字节的位置。
    /// 例如，如果位置 $0120 包含 $FC，位置 $0121 包含 $BA，则指令 JMP ($0120) 将导致下一条指令在 $BAFC（即 $0120 和 $0121 的内容）处执行。
    /// </summary>
    Indirect,

    /// <summary>
    /// 索引间接寻址通常与零页上的地址表一起使用。指令中的地址加上 X 寄存器的值（零页回绕），
    /// 得到目标地址的最低有效字节的位置。（也称为 Indirect.X）
    /// </summary>
    IndexedIndirect,

    /// <summary>
    /// 间接索引寻址是 6502 上最常用的间接寻址模式。指令包含一个零页位置，该位置是 16 位地址的最低有效字节。
    /// Y 寄存器的值会动态加到这个位置上，生成实际的目标地址。（也称为 Indirect.Y）
    /// </summary>
    IndirectIndexed
}


